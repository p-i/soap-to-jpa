#**
 *
 This template generates interface for all the field containers

 It consists of:
 - two getters

 @author Ilja Hämäläinen
 @version 1

*#
package $package;
import javax.annotation.Generated;

/**
 * GENERATED INTERFACE FOR JPA. DO NOT MODIFY!
 *
 * generated by soap-to-jpa Maven plugin (https://github.com/p-i/soap-to-jpa)
 */
@Generated(value = "net.pibenchmark.SoapToJpaMojo", date = "${generationDate}", comments = "SoapToJpa Maven plugin")
public interface IJpaStub {

    /**
     * Returns the state of JPA: empty/populated.
     * We can not rely on NULL because it is possible key, when
     * any object is populated, but still has no actual data,
     * because this object on the remote Taleo server does not
     * contain any data.
     *
     * @return status
     *            TRUE - contains data, thus it is already populated.
     *            FALSE - just created, contains only ID. Needs to be populated.
     */
    boolean isPopulated();

    /**
     * Set the state of JPA: empty/populated.
     *
     * @param isPopulated
     *            TRUE - contains data, thus it is already populated.
     *            FALSE - just created, contains only ID. Needs to be populated.
     */
    void setPopulated(boolean isPopulated);

    /**
     * Returns the ID of current object
     */
    ${identityFieldType} get${display.capitalize($identityFieldName)}();

    /**
     * Returns number of all the initialized fields
     */
    int getInitializedFieldsCount();

    /*
     * Populate JPA object with a data. Can be called either by constructor while creating or by client side while updating
     */
    int populate(Object stub, java.util.Map<java.lang.String, java.util.Set<${identityFieldType}>> mapAcc);
}
