#**
*
 This template generates Fields class body

 It consists of:
  - fields as constants

 @author Ilja Hämäläinen
 @version 1

*#
#if($isEmbedded)

/**
 * Inner interface ${className}Fields
 **/
public static class ${className}Fields implements IFieldProvider {
#else
package ${package};

import ${package}.IFieldProvider;

/**
 * GENERATED JPA CONTENT. DO NOT MODIFY!
 *
 * generated by soap-to-jpa Maven plugin (https://github.com/p-i/soap-to-jpa)
 */
public class ${className}Fields implements IFieldProvider {
#end
#*


    The list if constants
*#
#foreach( $field in $mapOfFields.keySet() )
    public static java.lang.String ${field} = "${display.capitalize($mapOfFields.get($field))}";
#end

    /**
     * Array of all the fields in the current class
     */
    private static java.lang.String[] ALL = {
#foreach( $field in $mapOfFields.keySet() )
        ${field}#if($foreach.hasNext), #end

#end
    };

    /**
     * Array of only primitive fields in the current class
     */
    private static java.lang.String[] SIMPLE_FIELDS = {
#foreach( $field in $mapOfFields.keySet() )
#if( $primitiveFields.contains($mapOfFields.get($field)) )
        ${field}#if($foreach.hasNext), #end

#end
#end
};

    /**
     * {@inheritDoc}
     *
     */
    public String[] getAllFileds() {
        return this.ALL;
    }

    /**
     * {@inheritDoc}
     *
     */
    public String[] getPrimitiveFields(){
        return this.SIMPLE_FIELDS;
    }
#*


    Inner classes
*#
#if(!${innerClasses.isEmpty()})
    #foreach($innerClass in $innerClasses)
        ${innerClass.getSourceCode()} // end of ${innerClass.getClassName()}Fields class
    #end
#end
}