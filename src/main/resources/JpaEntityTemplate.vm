#if($isEmbedded)

    /**
     * Inner class ${className}JPA.
     **/
    @Embeddable
    public static class ${className}JPA {
#else
package $package;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;

/**
 * GENERATED JPA CONTENT. DO NOT MODIFY!
 *
 * generated by soap-to-jpa Maven plugin (https://github.com/p-i/soap-to-jpa)
 */
@Entity
@Table(name = "${className}")
public class ${className}JPA {
#end

    @Id
    @GeneratedValue
    private Long id;
#*


    The list if private fields
*#
#foreach( $field in $fieldMap.keySet() )
#if(${fieldMap.get(${field}).isArrayOfComplextType()})
    @OneToMany
#elseif(${fieldMap.get(${field}).isInnerClass()})
    @Embedded
#end
    private ${fieldMap.get($field).render()}  _${field};
#end
#*


    Generate few constructors for each SOAP types assigned with this JPA
*#
#foreach( $constructor in $constructors )
    /**
     * Constructor, that restores an instance of ${className}JPA
     * from SOAP stub $constructor
     *
     * @param stub - instance of typeName <code>${constructor}</code>
     */
    public ${className}JPA(${constructor} stub) {

#foreach( $field in $fieldMap.keySet() )
#set( $currentField = ${fieldMap.get($field)} )
#set( $capitalizedFieldName = ${display.capitalize($field)} )
#*

    Instantiate every field regarding its type
*#
#if( ${currentField.isPrimitive()} || ${currentField.isArrayOfPrimitives()})
        this._${field} = stub.get${capitalizedFieldName}();
#elseif( ${currentField.isArrayOfComplextType()} )
        #*

            Transfer an array to a collection and mark it as "One-to-many"
        *#
        if (null != stub.get${capitalizedFieldName}()) {
            final int _${field}Size = stub.get${capitalizedFieldName}().length;
            this._${field} = com.google.common.collect.Lists.newArrayList();
            for (int i = 0; i < _${field}Size; i++) {
                this._${field}.add( new ${currentField.getTypeName()}(stub.get${capitalizedFieldName}()[i]) );
            }
        }
#elseif( ${currentField.isCollection()} )
        #*

            Populate the collection in a loop, creating of a new instance on every iteration
        *#
        if(null != stub.get${capitalizedFieldName}()) {
            this._${field} = com.google.common.collect.Lists.newArrayList();
            for (Object obj : stub.get${capitalizedFieldName}()) {
                this._${field}.add( obj);
            }
        }
#elseif( ${currentField.isComplexType()} )
        if (null != stub.get${capitalizedFieldName}()) {
            this._${field} = new ${currentField.getTypeName()}(stub.get${capitalizedFieldName}());
        }
#end
#end
    }

#end

        public Long getEntityId() { return this.id; }
        public void setEntityId(Long id) { this.id = id; }
#*

    Getters and setters
*#
#foreach( $field in $fieldMap.keySet() )

    ## Getter:
    public ${fieldMap.get($field).render()} get${display.capitalize($field)}() { return this._${field}; }
    ## Setter:
    public void set${display.capitalize($field)}(${fieldMap.get($field).render()} val) { this._${field} = val; }
#end
#*

    Inner classes
*#
#if(!${innerClasses.isEmpty()})
#foreach($innerClass in $innerClasses)
        ${innerClass.getSourceCode()}
        // end of ${innerClass.getClassName()}JPA class
#end
#end
#*

    toString()
*#

    /**
     * {@inheritDoc}
     *
     * This code requires Guava library.
     */
    @Override
    public java.lang.String toString() {
        return com.google.common.base.Objects.toStringHelper(this)
            .add("id", this.id)
#foreach( $field in $fieldMap.keySet() )
            .add("${field}", this._${field})
#end
            .omitNullValues()
            .toString();
    }

#*
    hashCode()
*#

    /**
     * {@inheritDoc}
     *
     * This code requires Guava library.
     */
    @Override
    public int hashCode() {
        return com.google.common.base.Objects.hashCode(
#foreach( $field in $fieldMap.keySet() )
            this._${field},
#end
        this.id);
    }

#*
    equals()
*#

    /**
     * {@inheritDoc}
     *
     * This code requires Guava library.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        final ${className}JPA that = (${className}JPA) o;

        return com.google.common.base.Objects.equal(this.id, that.id)
#foreach( $field in $fieldMap.keySet() )
            && com.google.common.base.Objects.equal(this._${field}, that._${field})
#end ;
    }

}