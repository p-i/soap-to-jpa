package $package;

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;

/**
* GENERATED JPA CONTENT. DO NOT MODIFY!
*
* generated by soap-to-jpa Maven plugin (https://github.com/p-i/soap-to-jpa)
*/
public class JPAEntitiesFactory {

    private static final Map<String, Class<? extends Serializable>> mapFactoryInstances = ImmutableMap.<String, Class<? extends Serializable>>builder()
#foreach( $interface in $interfaces.keySet() )
        .put("${interface}", ${interfaces.get($interface)}.class)
#end
      .build();

    private static JPAEntitiesFactory _instance;

    private JPAEntitiesFactory() {}

    /**
     * Return singletone instance of factory
     */
    public static JPAEntitiesFactory getInstance() {
        if (null == _instance) {
            _instance = new JPAEntitiesFactory();
        }
        return _instance;
    }

    /**
     * Creates JPA instance for a given SOAP stub
     */
    public Object create(Object soapStub) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        if (null == soapStub) {
            throw new IllegalArgumentException("Soap Stub is cannot be null. Factory doesn't know which JPA entity to return.");
        }

        final String soapStubInterface = soapStub.getClass().getInterfaces()[0].getTypeName();

        if (!mapFactoryInstances.containsKey(soapStubInterface)) {
            throw new RuntimeException("JPA Realisation for the " + soapStub
                + " (interface is " + soapStubInterface + ") was not found.");
        }
        else {
            Class<? extends Serializable> clazz = mapFactoryInstances.get(soapStubInterface);
                for (int i = 0; i < clazz.getDeclaredConstructors().length; i++) {
                        System.out.println(">> found cunstructor "
                            + clazz.getDeclaredConstructors()[i].getParameterTypes()[0].getTypeName()
                            + "; soap type ois " + soapStubInterface);
                        if (clazz.getDeclaredConstructors()[i].getParameterTypes()[0].getTypeName().equals(soapStubInterface)) {
                            return clazz.getDeclaredConstructors()[0].newInstance(soapStub);
                        }
                   }
            return null;
        }
    }
}