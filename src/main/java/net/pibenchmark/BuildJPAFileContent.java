package net.pibenchmark;

import com.thoughtworks.qdox.model.JavaClass;
import com.thoughtworks.qdox.model.JavaMethod;
import org.apache.maven.plugin.MojoFailureException;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Builds one JPA file based on a given interfaces.
 *
 * Debug this plugin:
 *    mvn net.pibenchmark:soap-to-jpa-maven-plugin:1.0-SNAPSHOT:soap-to-jpa
 */
public class BuildJPAFileContent {

    private final static String NEW_LINE = System.getProperty("line.separator");
    private static final int GETTER_PREFIX_LENGTH = "get".length();
    private static final String INDENT = "    ";

    /**
     * Generate Java content for JPA entity.
     *
     * @param interfaceFile
     * @param file
     * @return
     */
    public static boolean buildJPAfor(JavaClass interfaceFile, File file) throws MojoFailureException {
        StringBuilder fileContent = new StringBuilder();

        // package
        fileContent.append("package " + interfaceFile.getPackageName() + ";" + NEW_LINE + NEW_LINE);

        // imports
        fileContent.append("import " + Entity.class.getTypeName() + ";" + NEW_LINE);
        fileContent.append("import " + Id.class.getTypeName() + ";" + NEW_LINE);
        fileContent.append("import " + GeneratedValue.class.getTypeName() + ";" + NEW_LINE);
        fileContent.append("import " + Table.class.getTypeName() + ";" + NEW_LINE + NEW_LINE);

        // Class comment
        fileContent.append("/** " + NEW_LINE);
        fileContent.append(" * GENERATED JPA CONTENT. DO NOT MODIFY!" + NEW_LINE);
        fileContent.append(" * generated by soap-to-jpa plugin" + NEW_LINE);
        fileContent.append(" */" + NEW_LINE);

        // annotation "@Entity"
        fileContent.append("@" + Entity.class.getSimpleName() + NEW_LINE);

        // annotation "@Table"
        fileContent.append("@" + Table.class.getSimpleName() + "(name = \"" + interfaceFile.getName() + "\")" + NEW_LINE);

        // class declaration
        fileContent.append("public class " + interfaceFile.getName() + " {" + NEW_LINE + NEW_LINE);

        // Id and getter/setter
        fileContent.append(INDENT + "@" + Id.class.getSimpleName() + NEW_LINE);
        fileContent.append(INDENT + "@" + GeneratedValue.class.getSimpleName() + NEW_LINE);
        fileContent.append(INDENT + "protected Long id;" + NEW_LINE);
        fileContent.append(INDENT + "public Long getId() { return id; }" + NEW_LINE);
        fileContent.append(INDENT + "public void setId(Long id) { this.id = id; }" + NEW_LINE + NEW_LINE);

        Map<String, String> mapOfFields = buildMapOfFields(interfaceFile);

        // generate fields
        generateFields(fileContent, mapOfFields);

        fileContent.append("} ");

        return writeContentToFile(fileContent.toString(), file);
    }

    /**
     * Builds map "field" <==> "type"
     *
     * @param jc
     * @return
     */
    private static Map<String, String> buildMapOfFields(JavaClass jc) {
        Map<String, String> mapField = new HashMap<>();

        for (JavaMethod method : jc.getMethods()) {
            if(method.getName().startsWith("get")) {
                mapField.put(extractFieldName(method.getName()), method.getReturnType().getFullyQualifiedName());
            }
        }

        return mapField;
    }

    private static void generateFields(StringBuilder sb, Map<String, String> map) {
        map.forEach((fieldName, fieldType) ->
            sb.append(INDENT)
                    .append(fieldType)
                    .append(" ")
                    .append(fieldName)
                    .append(";")
                    .append(NEW_LINE));

    }

    /**
     * Write down all the content to a given file
     *
     * @param content
     * @param file
     * @return result as boolean
     *
     * @throws MojoFailureException
     */
    private static boolean writeContentToFile(String content, File file) throws MojoFailureException {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {

            bw.write(content.toString());

        } catch (IOException e) {
            throw new MojoFailureException(e.getMessage());
        }

        return true;
    }

    /**
     * Extracts the name for a field using getter name
     * Example, for the getter "getSecondName" it returns "secondName"
     *
     * @param strGetterName
     * @return
     */
    static String extractFieldName(String strGetterName) {
        return strGetterName.substring(GETTER_PREFIX_LENGTH, GETTER_PREFIX_LENGTH + 1).toLowerCase() +
                strGetterName.substring(GETTER_PREFIX_LENGTH + 1);

    }
}